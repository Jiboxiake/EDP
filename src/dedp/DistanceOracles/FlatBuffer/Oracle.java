// automatically generated by the FlatBuffers compiler, do not modify

package dedp.DistanceOracles.FlatBuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Oracle extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Oracle getRootAsOracle(ByteBuffer _bb) { return getRootAsOracle(_bb, new Oracle()); }
  public static Oracle getRootAsOracle(ByteBuffer _bb, Oracle obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Oracle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public dedp.DistanceOracles.FlatBuffer.Wsp wsps(int j) { return wsps(new dedp.DistanceOracles.FlatBuffer.Wsp(), j); }
  public dedp.DistanceOracles.FlatBuffer.Wsp wsps(dedp.DistanceOracles.FlatBuffer.Wsp obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 16, bb) : null; }
  public int wspsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public dedp.DistanceOracles.FlatBuffer.Wsp.Vector wspsVector() { return wspsVector(new dedp.DistanceOracles.FlatBuffer.Wsp.Vector()); }
  public dedp.DistanceOracles.FlatBuffer.Wsp.Vector wspsVector(dedp.DistanceOracles.FlatBuffer.Wsp.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 16, bb) : null; }

  public static int createOracle(FlatBufferBuilder builder,
      int wspsOffset) {
    builder.startTable(1);
    Oracle.addWsps(builder, wspsOffset);
    return Oracle.endOracle(builder);
  }

  public static void startOracle(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addWsps(FlatBufferBuilder builder, int wspsOffset) { builder.addOffset(0, wspsOffset, 0); }
  public static void startWspsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(16, numElems, 8); }
  public static int endOracle(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOracleBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedOracleBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Oracle get(int j) { return get(new Oracle(), j); }
    public Oracle get(Oracle obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

